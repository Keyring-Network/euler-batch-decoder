name: 🚀 Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.12"

jobs:
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: 📦 Install dependencies
        run: uv sync --all-extras

      - name: 🧪 Run full test suite
        run: make test

      - name: 🔍 Run all quality checks
        run: make check

      - name: 📋 Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION=${{ github.event.release.tag_name }}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION#v}"

  build-package:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ Install uv
        uses: astral-sh/setup-uv@v3

      - name: 🏗️ Build package
        run: uv build

      - name: 📋 List built artifacts
        run: ls -la dist/

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish-pypi:
    name: 🐍 Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-package]
    environment: release
    permissions:
      id-token: write  # For trusted publishing
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 🚀 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true

  create-github-release:
    name: 📝 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📝 Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          release_name: Release v${{ needs.validate-release.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## 🎉 Release v${{ needs.validate-release.outputs.version }}
            
            ### ✨ What's New
            - Automated release from GitHub Actions
            - All quality checks passed ✅
            - Package published to PyPI 🐍
            
            ### 📦 Installation
            ```bash
            pip install evc-batch-decoder==${{ needs.validate-release.outputs.version }}
            ```
            
            ### 📊 Quality Metrics
            - 🔍 Linting: ✅ Passed
            - 🎨 Formatting: ✅ Passed  
            - 🏷️ Type Checking: ✅ Passed
            - 🧪 Tests: ✅ Passed with 100% coverage
